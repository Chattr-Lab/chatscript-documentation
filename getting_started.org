#+TITLE: Getting Started with ChatScript
* Setting up
- Download and extract Chatscript: https://sourceforge.net/projects/chatscript/
- Create your bot
  - Decide on the name of your bot
  - Open the ChatScript folder in Explorer
  - Go to the ~RAWDATA~ folder
  - Copy and paste the ~HARRY~ folder
  - Rename the copy to be whatever you want your bot's name to be
  - Copy and paste the ~filesHarry.txt~ file
  - Rename the copy to ~files<Name>.txt~ to match the name of your folder
  - Open ~files<Name>.txt~ and change the 2nd line to be ~RAWDATA/<NAME>/~
- Download and install Atom: https://atom.io/
- Install Chatscript Syntax highlighting in Atom
  - Open the Atom text editor on your computer
  - Open File --> Settings, go to the Install menu
  - Type "language-chatscript" and press Enter
  - Click Install on the ~language-chatscript~ package
- Open your project
  - File --> Open Folder...
  - Find the folder you created for your bot and open it
- Rename the bot in ChatScript
  - Open ~simplecontrol.top~
  - Change ~HARRY~ on line 9 to say ~<NAME>~
  - Press ~CTRL-S~ to save ~simplecontrol.top~
* Exploring ChatScript
** Interacting with the basic bot
- Before we look at any code, let's take a look at a bot in action.  On Windows,
  you can interact with the bots you build just by going to ~<ChatScript
  folder>\BINARIES\~ and double-clicking on ~chatscript.exe~
- The first thing you'll do is enter your name. After that, you're interacting
  directly with the basic bot included with ChatScript.
- The basic bot will carry on a basic conversation, including a couple smalltalk
  items and some questions about running away from home. In the next section
  we'll take a look at the code, but for now just check it out.
- The bot also includes a couple commands to interact with Wikipedia:
  - If you ask the bot: "What is a <word>", it will attempt to find the answer
    for you.  Example: "~What is a banana?~". These response don't always work,
    because sometimes Wikipedia doesn't present the information in a way the bot
    can understand.  If your query doesn't work, try a new one.
  - You can also ask about people. Example: "~Who is Kanye West?~"
- You can also tell the bot to say something with the "say" command, and it will
  repeat your message back to you.  Example: "~Say I am a robot~"
** Exploring the code - basics
- In Atom's left sidebar, open ~childhood.top~
  - This is a very simple topic file to demonstrate how you can begin to give
    your bot conversational abilities
*** Topic Files
  - Note the top line:

#+BEGIN_SRC
TOPIC: ~childhood (child childhood kid little memory young younger history "run away")
#+END_SRC

- Let's break that down:
  - ~TOPIC:~ tells ChatScript that this is a topic file. Topics are the way
    ChatScript organizes topics of conversation
  - =~childhood= is a name for the topic so you can identify any issues during debugging
  - ~(child childhood ...)~ are the trigger terms that will be used to initiate
    conversation in this topic. If someone says one of those terms, it will move
    the bot's conversation into this topic. The bot may also randomly pick this
    conversation topic if it hasn't used it yet, and if it's not sure what else
    to say.
- Below the ~TOPIC~ line are a couple lines of comments. These lines begin with
  a ~#~, and are used to tell you things about the code, but don't actually /do/
  anything in the program.
*** Gambits
- On line 6 we see our first question from the bot. The code for that is shown
  here:

#+BEGIN_SRC
t: Did you run away from home when you were little?
#+END_SRC

- Let's break that down:
  - ~t:~ is how you indicate that this is a statement from the bot. These are
    called "/gambits/," and don't need to match anything from a user.
  - ~Did you run away...~ this is what the bot says. Everything after the ~:~ is
    what the bot says when it reaches this gambit.
- Under the ~t:~ line, you can see a couple lines beginning with ~a:~. After a
  gambit, you can create some different options for how users might respond.
  When the bot asks "Did you run away," it has two different possible responses
  from users: yes and no. The =~= before yes and no indicates a ChatScript
  concept.  For more on concepts see the [[#sec:concepts][Concepts]] section below.
  - ChatScript will only use 1 of the possible responses, but you can list as
    many as you want. Here we have responses for "yes" and "no," but no response
    if the user responds with "Why do you ask?"
  - It is also possible to go even deeper. Under each ~a:~, you might put a
    couple different ~b:~ tags to respond to those. You can see an example of
    that on lines 40-46.
*** Naming gambits
- On line 14 we can see a gambit, but it's a little different from the ones we've seen before:

#+BEGIN_SRC
t: RUNAWAY ( ) I ran away once, but my parents found me and dragged me back. 
#+END_SRC

- This gambit has been given a name: ~RUNAWAY~. 
  Names are not required, but they can be included if you want to refer to a gambit later on
- For example, if you look at line 53, you'll see a reference to our ~RUNAWAY~
  gambit.  If the user says anything about running away, the bot will respond
  with this the gambit labled ~RUNAWAY~, and you tell ChatScript to do that with
  ~^reuse ( RUNAWAY )~
*** Different types of gambit
So far, all of our gambits have used the ~t:~ label. The ~t~ gambits are used
sequentially, meaning the bot will start at the top of the file and work its way
down, using each one in turn. There are a couple different types of gambit to
choose from:

- ~t:~ - Used sequentially. The bot will start at the top of the file and work
  its way down. 
- ~r:~ - Used in random order. Rather than starting at the top, the bot will
  select one of the random gambits and send it out.
- ~?:~ - Responds to a user question. Will only trigger if the user asks a
  question
- ~u:~ - Responses to user messages.  You can see some examples of this starting
  with line 50 in ~childhood.top~.  These have a slightly different format than
  the ~r:~ or ~t:~ gambits

Let's look at line 56:

#+BEGIN_SRC
u: HAPPY ( how * childhood ) I was happy as a kid. 
#+END_SRC

Let's break it down:

- ~u:~ indicates that this is a response to a user
- ~HAPPY~ is a label, just like ~RUNAWAY~ that we already talked about
- ~( how * childhood )~ is the user message we're matching. We'll talk more
  about that in the next section
- ~I was happy as a kid.~ is the bot's response

The biggest new thing here is the user message matching.  It looks just like the
matching for =~yes= and =~no= from the ~a:~ message up above.  To understand a
bit more about how to match, check out the next section.
*** User message matching - basics
We can see how pattern matching works in a whole bunch of ways in
~childhood.top~.  The matching pattern is put into parentheses ~()~ right after
the gambit label. Let's break some of those down:

- Line 34: ~( snake )~. This is the most basic matching. If the user says
  "snake" or "snakes" at that point in the conversation, this pattern will match
  and the appropriate response will be triggered.
- Line 22: =( ~food )=. This is a concept. We've already talked about concept
  matching. If the user says anything from the food category, this pattern will
  match.
- Line 40: ~( [ dream nightmare ] )~. This is option matching. By placing terms
  inside brackets ~[]~ we can include multiple options for a user message and
  trigger the same response. Here, if the user says either "dream" or
  "nightmare," the bot response on line 40 will trigger.
- Line 53: ~( run_away )~. This is phrase matching.  You can include more than
  one word together with _ to make sure the exact phrase matches. This will only
  work for common phrases that ChatScript has already defined.
- Line 56: ~( how * childhood )~. This match includes a wildcard.  The * is used
  to match any number of words.  So the user could say "how was childhood for
  you" or "how was your childhood" or "how was your time in your childhood" and
  each of those would match with line 56.
- Line 65: ~( << you [ early childhood ] memory >> )~.  This is the biggest one
  yet, and it combines what we've already talked about--options matching--with a
  new idea: ordering.  Up until now, the patterns we've used will only match in
  the exact order we've put them in. Here, with the ~<<>>~ symbols, we can say
  that order doesn't matter. So we can have "Do you have any early memories?" or
  "Do you have any memory of your childhood?"  Any order of the words inside the
  ~<<>>~ will match the pattern.

At this point you have all the basics you need to begin building your own topic
files.  Be sure to include a mix of ~t:~ and ~u:~ gambits so that you can be
responsive to the things your chat partner says.
*** User message matching - advanced
There are a couple other valuable topics to make creating your bot a little
easier.  A lot of these come from linguistics, but they're pretty easy to
understand.  



** Exploring the code - advanced
Now let's take a look at some more advanced topics. We won't be building on any
of these in this tutorial, but you should know that they are there
*** Wikipedia search
*** Quibbles
*** Variable matching
~_~ and ~_0~
*** Gambit attributes
~keep()~
*** Topic attributes
~nostay()~

~repeat()~
* Creating your bot
- Create the start of your own new TOPIC file
  - Right-click on the ~<NAME>~ folder on the sidebar of Atom
  - Select New File and enter a name for the file.  We'll go with ~robot.top~
  - Enter the following on the top line of your new ~robot.top~ file:

#+BEGIN_SRC
TOPIC: ~robot (robot bot hal)
#+END_SRC

* ChatScript ideas
** Concepts
:PROPERTIES:
:CUSTOM_ID: sec:concepts
:END:

Concepts are ChatScripts built-in way of organizing words based on their
semantic meaning.  This is extremely helpful when you're making a bot, because
it allows you to combine a variety of possible user messages into a single
entry.  For example, we have the concept of =~pet_animals= that contains
references to just about every animal that can be kept as a pet, whether it's a
bird, cat, ferret, or spider.  If you want to talk about pets, or recognize when
your chat partner is talking about pets, you can just insert the concept of
=~pet_animals= into your pattern matching.

Another great example of why concepts are awesome: greetings.  How many
different ways can you say "Hello?"  Let's name a few:

- Hi
- Hello
- Howdy
- Nice to see you
- Hola

and the list goes on.  What if I want to recognize when my users are saying
"Hello" so I can say hello back? That's what ChatScript concepts are for. Enter =~emohello=
into your pattern match, and you'll instantly match all of those possible greetings.

So how can you find out what concepts are available?  The best way to start is
by opening ChatScript and using the ~:concepts~ command. For example, if I
wanted to see what concepts are related to "hello", I would enter ~:concepts
hello~ when talking to the bot.  ChatScript will respond with a list of concepts
that would match if you typed the word "hello" into a chat message.

Once you have a concept, it would be nice if we could check out what words or
phrases would match it. That's where the ~:down~ command comes in.  Just enter
=:down ~emohello= to see what words and phrases are a part of the =~emohello=
concept.

* ChatScript Interactive Commands
- ~:reset~ Starts your conversation over again, removing any history of previous
  conversation
- ~:build <Name>~ Builds a bot based on the contents of ~files<Name>.txt~
- ~:concepts <word>~ Shows you what concepts contain the ~<word>~ you enter
- =:down ~concept= Shows what words are contained within the given =~concept=
