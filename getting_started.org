#+TITLE: Getting Started with ChatScript
* Setting up
- Download and extract Chatscript: https://sourceforge.net/projects/chatscript/
- Create your bot
  - Decide on the name of your bot
  - Open the ChatScript folder in Explorer
  - Go to the ~RAWDATA~ folder
  - Copy and paste the ~HARRY~ folder
  - Rename the copy to be whatever you want your bot's name to be
  - Copy and paste the ~filesHarry.txt~ file
  - Rename the copy to ~files<Name>.txt~ to match the name of your folder
  - Open ~files<Name>.txt~ and change the 2nd line to be ~RAWDATA/<NAME>/~
- Download and install Atom: https://atom.io/
- Install Chatscript Syntax highlighting in Atom
  - Open the Atom text editor on your computer
  - Open File --> Settings, go to the Install menu
  - Type "language-chatscript" and press Enter
  - Click Install on the ~language-chatscript~ package
- Open your project
  - File --> Open Folder...
  - Find the folder you created for your bot and open it
- Rename the bot in ChatScript
  - Open ~simplecontrol.top~
  - Change ~HARRY~ on line 9 to say ~<NAME>~
  - Press ~CTRL-S~ to save ~simplecontrol.top~
* Exploring ChatScript
** Interacting with the basic bot
- Before we look at any code, let's take a look at a bot in action.  On Windows,
  you can interact with the bots you build just by going to ~<ChatScript
  folder>\BINARIES\~ and double-clicking on ~chatscript.exe~
- The first thing you'll do is enter your name. After that, you're interacting
  directly with the basic bot included with ChatScript.
- The basic bot will carry on a basic conversation, including a couple smalltalk
  items and some questions about running away from home. In the next section
  we'll take a look at the code, but for now just check it out.
- The bot also includes a couple commands to interact with Wikipedia:
  - If you ask the bot: "What is a <word>", it will attempt to find the answer
    for you.  Example: "~What is a banana?~". These response don't always work,
    because sometimes Wikipedia doesn't present the information in a way the bot
    can understand.  If your query doesn't work, try a new one.
  - You can also ask about people. Example: "~Who is Kanye West?~"
- You can also tell the bot to say something with the "say" command, and it will
  repeat your message back to you.  Example: "~Say I am a robot~"
** Exploring the code - basics
- In Atom's left sidebar, open ~childhood.top~
  - This is a very simple topic file to demonstrate how you can begin to give
    your bot conversational abilities
  - Note the top line:

#+BEGIN_SRC
TOPIC: ~childhood (child childhood kid little memory young younger history "run away")
#+END_SRC

- Let's break that down:
  - ~TOPIC:~ tells ChatScript that this is a topic file. Topics are the way
    ChatScript organizes topics of conversation
  - =~childhood= is a name for the topic so you can identify any issues during debugging
  - ~(child childhood ...)~ are the trigger terms that will be used to initiate
    conversation in this topic. If someone says one of those terms, it will move
    the bot's conversation into this topic. The bot may also randomly pick this
    conversation topic if it hasn't used it yet, and if it's not sure what else
    to say.
- Below the ~TOPIC~ line are a couple lines of comments. These lines begin with
  a ~#~, and are used to tell you things about the code, but don't actually /do/
  anything in the program.
- On line 6 we see our first question from the bot. The code for that is shown
  here:

#+BEGIN_SRC
t: Did you run away from home when you were little?
#+END_SRC

- Let's break that down:
  - ~t:~ is how you indicate that this is a statement from the bot. These are
    called "/gambits/," and don't need to match anything from a user.
  - ~Did you run away...~ this is what the bot says. Everything after the ~:~ is
    what the bot says when it reaches this gambit.
- Under the ~t:~ line, you can see a couple lines beginning with ~a:~. After a
  gambit, you can create some different options for how users might respond.
  When the bot asks "Did you run away," it has two different possible responses
  from users: yes and no. The =~= before yes and no indicates a ChatScript
  concept.  For more on concepts see the [[sec:concepts][Concepts]] section below.
  - ChatScript will only use 1 of the possible responses, but you can list as
    many as you want. Here we have responses for "yes" and "no," but no response
    if the user responds with "Why do you ask?"
  - It is also possible to go even deeper. Under each ~a:~, you might put a
    couple different ~b:~ tags to respond to those. You can see an example of
    that on lines 40-46.
** Exploring the code - advanced
Now let's take a look at some more advanced topics. We won't be building on any
of these in this tutorial, but you should know that they are there.
 

* Creating your bot
- Create the start of your own new TOPIC file
  - Right-click on the ~<NAME>~ folder on the sidebar of Atom
  - Select New File and enter a name for the file.  We'll go with ~robot.top~
  - Enter the following on the top line of your new ~robot.top~ file:

#+BEGIN_SRC
TOPIC: ~robot (robot bot hal)
#+END_SRC

* ChatScript ideas
** Concepts
:PROPERTIES:
:CUSTOM_ID: sec:concepts
:END:

Concepts are ChatScripts built-in way of organizing words based on their
semantic meaning.  This is extremely helpful when you're making a bot, because
it allows you to combine a variety of possible user messages into a single
entry.  For example, we have the concept of =~pet_animals= that contains
references to just about every animal that can be kept as a pet, whether it's a
bird, cat, ferret, or spider.  If you want to talk about pets, or recognize when
your chat partner is talking about pets, you can just insert the concept of
=~pet_animals= into your pattern matching.

Another great example of why concepts are awesome: greetings.  How many
different ways can you say "Hello?"  Let's name a few:

- Hi
- Hello
- Howdy
- Nice to see you
- Hola

and the list goes on.  What if I want to recognize when my users are saying
"Hello" so I can say hello back? That's what ChatScript concepts are for. Enter =~emohello=
into your pattern match, and you'll instantly match all of those possible greetings.

So how can you find out what concepts are available?  The best way to start is
by opening ChatScript and using the ~:concepts~ command. For example, if I
wanted to see what concepts are related to "hello", I would enter ~:concepts
hello~ when talking to the bot.  ChatScript will respond with a list of concepts
that would match if you typed the word "hello" into a chat message.

Once you have a concept, it would be nice if we could check out what words or
phrases would match it. That's where the ~:down~ command comes in.  Just enter
=:down ~emohello= to see what words and phrases are a part of the =~emohello=
concept.

* ChatScript Interactive Commands
- ~:reset~ Starts your conversation over again, removing any history of previous
  conversation
- ~:build <Name>~ Builds a bot based on the contents of ~files<Name>.txt~
- ~:concepts <word>~ Shows you what concepts contain the ~<word>~ you enter
- =:down ~concept= Shows what words are contained within the given =~concept=
